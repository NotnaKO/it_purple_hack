<!DOCTYPE html>
<html lang="ru">
<head>
    <title>Analytics and Metrics</title>
    <style>
        body {
            background-color: #f9f9f9;
            color: #333;
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        
        h1 {
            font-size: 2em;
            text-align: center;
            margin-bottom: 20px;
        }

        .comandname {
            color: #ff6347;
        }

        h2 {
            font-size: 1.5em;
            text-transform: uppercase;
            margin-top: 30px;
        }

        h2.bigger {
            text-align: center;
        }

        .container {
            display: flex;
            margin-top: 20px;
        }

        .column {
            flex: 1;
            padding: 20px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin: 10px;
        }

        .input {
            margin-bottom: 10px;
            padding: 5px;
            font-size: 1em;
            border: 1px solid #999;
            border-radius: 5px;
        }

        .grey-background {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
        }

        .grey {
            background-color: #ccc;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            margin-right: 10px;
        }

        .grey:hover {
            background-color: #999;
        }

        .json {
            background-color: #f9f9f9;
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
        }

        .price {
            color: #0077cc;
        }

        .invisible {
            display: none;
        }

        .download-window {
            margin-top: 30px;
            padding: 15px;
            background-color: #333;
            color: #fff;
            text-align: left;
            border-radius: 5px;
        }

        .download-window a {
            color: #fff;
            font-weight: bold;
            text-decoration: none;
            margin: 0 10px;
        }

        .download-window a:hover {
            text-decoration: underline;
        }

        .answer {
            margin: 10px;
            font-family: 'Arial', sans-serif;
            font-size: 1em;
            color: #ff6347;
        }
    </style>
</head>
<body>
    <h1>Analytics Support Website by <div type="text" class="comandname">CalculusEnjoyers</div></h1>
    <div class="container">
        <div class="column">
            <h2>Construct storage</h2>
            <h3>Впишите id новой baseline матрицы</h3>
            <input id="baselineInput" class="input" type="text" placeholder="Baseline matrix id">
            <h3>Впишите действующие segment id и соответствующие им id скидочных матриц</h3>
            <div id="discountInputs">
                <div class="input-row">
                    <input type="text" placeholder="Segment id">
                    <input type="text" placeholder="Discount matrix id">
                    <button class="grey" onclick="removeInput(this)">-</button>
                </div>
            </div>
            <button class="grey" onclick="addInputDiscount()">+</button>
            <button class="grey" onclick="showData()">Show JSON Data</button>
            <div class="json">
            <div id="jsonData"></div>
            <div id="jsonSender"></div>
            </div>

        </div>
    </div>

    <h2 class="bigger">Price matrix manipulation</h2>
    <div class="container">
        <div class="column">
            <h2>Update/Insert rows in matrix</h2>
            <h3>Впишите id изменяемой матрицы</h3>
            <input id="UpdateIDInput" class="input" type="text" placeholder="Matrix id">
            <h3>Впишите столбцы с id локации, id категории товаров и новыми ценами</h3>
            <div id="updateInputs">
                <div class="input-row">
                    <input type="text" placeholder="Location id">
                    <input type="text" placeholder="Category id">
                    <input type="text" placeholder="Price">
                    <button class="grey" onclick="removeInput(this)">-</button>
                </div>
            </div>
            <button class="grey" onclick="addInputUpdate()">+</button>
            <button class="grey" onclick="sendUpdate()">Update table</button>
        </div>
        <div class="column">
            <h2>Matrix id in price manager</h2>
            <h3>Найти id матрицы в сервисе поиска цен.
            Если его нет, то id будет присвоен автоматически</h3>
            <input type="text" id="adderInput" class="input" placeholder="Enter matrix name">
            <button class="grey" onclick="addRequest()">Make request</button>
            <label class="answer" id="adderAnswer"></label>
            <h2>Get matrix name from price manager</h2>
            <h3>Узнать по id ценовой матрицы в сервисе поиска цен ее название в схеме</h3>
            <input id="getterInput" class="input" type="text" placeholder="Enter matrix id">
            <button class="grey" onclick="getRequest()">Make request</button>
            <label class="answer" id="getterAnswer"></label>
        </div>
    </div>

    <h2 class="bigger">Download</h2>
    <div class="download-window">
        <a download href="/files/locations.txt">Location graph (Дерево локаций с указанием их id)</a> | <a href="/files/categories.txt" download>Microcategory graph (Дерево категорий с указанием их id)</a>
    </div>

    <script>
        function showData() {
            const baselineInput = document.getElementById('baselineInput').value;
            const discountRows = document.querySelectorAll('#discountInputs .input-row');
            const discounts = {};


            discountRows.forEach(row => {
                const discountSegmentIdInput = row.querySelector('input[type="text"]:first-child');
                const valueInput = row.querySelector('input[type="text"]:nth-child(2)');

                let discountSegmentId = parseInt(discountSegmentIdInput.value, 10);
                const value = valueInput.value;

                if (!isNaN(discountSegmentId) && Number.isInteger(discountSegmentId)) {
                    discounts[discountSegmentId] = value;
                } else {
                    alert('Discount Segment ID should be an integer. Please enter a valid integer.');
                    return
                }
            });

            const jsonData = {
                baseline: baselineInput,
                discounts: discounts
            };

            const jsonDataDiv = document.getElementById('jsonData');
            jsonDataDiv.innerHTML = `<pre>${JSON.stringify(jsonData, null, 2)}</pre>`;

            const jsonDataDiv2 = document.getElementById('jsonSender');
            jsonDataDiv2.innerHTML = `<input type="checkbox" id="sendCheckbox" onchange="toggleSendButton()">Check to enable button
            <button id="sendButton" class="grey invisible" onclick="sendStorage()">Send to server</button>`;
        }

        function addInputUpdate() {
            const discountInputs = document.getElementById('updateInputs');

            const newInputRow = document.createElement('div');
            newInputRow.classList.add('input-row');
            newInputRow.innerHTML = `
                <input type="text" placeholder="Location id">
                <input type="text" placeholder="Category id">
                <input type="text" placeholder="Price">
                <button class="grey" onclick="removeInput(this)">-</button>
            `;

            discountInputs.appendChild(newInputRow);
        }

        function addInputDiscount() {
            const discountInputs = document.getElementById('discountInputs');

            const newInputRow = document.createElement('div');
            newInputRow.classList.add('input-row');
            newInputRow.innerHTML = `
                <input type="text" placeholder="Segment id">
                <input type="text" placeholder="Discount matrix id">
                <button class="grey" onclick="removeInput(this)">-</button>
            `;

            discountInputs.appendChild(newInputRow);
        }

        function removeInput(button) {
            button.parentNode.remove();
        }

        function toggleSendButton() {
            const checkbox = document.getElementById('sendCheckbox');
            const button = document.getElementById('sendButton');

            if (checkbox.checked) {
                button.style.display = 'block'; // Show the button
            } else {
                button.style.display = 'none'; // Hide the button
            }
        }

        function addRequest() {
            // Отправляем GET запрос
            const data = document.getElementById('adderInput').value;
            console.log(`/add_request?data="${data}"`)
            fetch(`/add_request?data=${data}`)
            .then(response => response.json())
            .then(data => {
                console.log('GET запрос выполнен успешно:', data);
                const adderAnswerDiv = document.getElementById('adderAnswer');
                adderAnswerDiv.textContent = " Мatrix got id: " + data["res"];
            })
            .catch(error => {
                console.error('Ошибка при выполнении GET запроса:', error);
            });
        }

        function getRequest() {
            // Отправляем GET запрос
            const data = document.getElementById('getterInput').value;
            console.log(`/get_request?data="${data}"`)
            fetch(`/get_request?data=${data}`)
            .then(response => response.json())
            .then(data => {
                console.log('GET запрос выполнен успешно:', data);
                const getterAnswerDiv = document.getElementById('getterAnswer');
                getterAnswerDiv.textContent = " Matrix has id: " + data["res"];
            })
            .catch(error => {
                console.error('Ошибка при выполнении GET запроса:', error);
            });
        }

        function sendUpdate() {
            const updateIDInput = document.getElementById('UpdateIDInput').value;
            const updateRows = document.querySelectorAll('#updateInputs .input-row');
            const updates = [];

            updateRows.forEach(row => {
                const locationIdInput = row.querySelector('input[type="text"]:first-child');
                const categoryIdInput = row.querySelector('input[type="text"]:nth-child(2)');
                const valueInput = row.querySelector('input[type="text"]:nth-child(3)');

                let locationId = parseInt(locationIdInput.value, 10);
                let categoryId = parseInt(categoryIdInput.value, 10);
                let value = parseInt(valueInput.value, 10);

                if (!isNaN(locationId) && Number.isInteger(locationId)) {
                    if (!isNaN(categoryId) && Number.isInteger(categoryId)) {
                        if (!isNaN(value) && Number.isInteger(value)) {
                            updates.push([locationId, categoryId, value]);
                        } else {
                            alert('Location ID "' + locationIdInput + '" should be an integer. Please enter a valid integer.');
                            return;
                        }
                    } else {
                        alert('Category ID "' + categoryIdInput + '" should be an integer. Please enter a valid integer.');
                        return;
                    }
                } else {
                    alert('Price "' + valueInput + '" should be an integer. Please enter a valid integer.');
                    return;
                }
            });

            const jsonData = {
                update_matrix: updateIDInput,
                updates: updates
            };

            fetch('/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData, null, 2)
            })
            .then(response => {
                if (response.ok) {
                    alert('Data sent successfully via POST request.');
                } else {
                    alert('Error sending data.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        function sendStorage() {
            const jsonString = document.getElementById('jsonData').textContent;
            console.log('Строка из элемента "jsonData":', jsonString);

            fetch('/storage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: jsonString
            })
            .then(response => {
                if (response.ok) {
                    alert('Data sent successfully via POST request.');
                } else {
                    alert('Error sending data.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    </script>
</body>
</html>
